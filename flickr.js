//flickr.js | using the flickr api to load photos

//**********************************VARIABLE DECLARATION**********************************

//div of the outside
var div = document.getElementById("outter");
//the image selected for lightbox
var selectedImage = document.getElementById("lightbox-image");
//the photo's caption
var caption = document.getElementById("title");
//number of photo thumbnails
var n = 55;
//array of pictures
var allPics = [];

//**********************************INITALIZING IMAGES**********************************

/*
 * initializes the search by creating a new XMLHttpRequest
 * and either generates the search URL or sends an error
 */
function initialize() {
  var xhr = new XMLHttpRequest();
  var grid = document.getElementById("gridSite");
  var searchItem = document.getElementById("request").value.trim(); 

  //if there is an element
  if (searchItem !== null) {
    //URL generated by flickr api key registered to this project including the variable n and searchItem
    var url = "https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=0dd0b084672224f45b61a1413026c4b5&format=json&safe_search=1&content_type=1&sort=relevance&extras=url_s&page=1&per_page=" + n + "&nojsoncallback=1&text=" + searchItem;
    
    //helper function that will get the photo data from the XMLHttpRequest and URL
    getPhotoData(xhr, url);
  
  } else {
    console.log("No search item entered.");
  }
}

/*
 * gets the photo data and either goes to print the grid
 * or generates an error 
 */
function getPhotoData(xhr, url) {
  xhr.open('GET', url, true);

  xhr.onload = function() {
    //photo data is correct
    if (xhr.status == 200) {
      var data = JSON.parse(xhr.responseText);
      printGrid(data);
    //something went wrong
    } else {
      console.log("Photo data could not be loaded.");
    }
  };

  xhr.send();
}

/*
 * prints the thumbnails as a grid with the given  
 * information in the variable data
 */
function printGrid(data) {
  //counter in for loop below
  var a;
  var gridList = data.photos.photo;
  var size = gridList.length;
  var grid = document.getElementById("gridSite");

  for (a = 0; a < size; a++) {
    //adds new grid to list
    allPics.push(gridList[a]);
    var thumbnail = document.createElement("img");
    var link = document.createElement("a");
//****9
    thumbnail.setAttribute("src", gridList[a].url_s);
    thumbnail.setAttribute("class", "thumbnail");
    //id == index == counter
    thumbnail.setAttribute("id", a);
    
  
    link.setAttribute("href", "#");
    link.setAttribute("onclick", "open('" + gridList[a].url_s + "'," + a + ",'" + gridList[a].title.replace(/'/g, "\\'") + "')");

    link.appendChild(thumbnail);
    grid.appendChild(link);
  }
}

//**********************************LIGHTBOX MODE**********************************

/*
 * when user clicks on thumbnail, opens lightbox mode
 */
function open(url, id, title) {
  div.style.display = "block";
  //updates the selectedImage to a larger version
  selectedImage.setAttribute("src", url.replace("_s.jpg", "_c.jpg"));
  //its new id is updated
  selectedImage.setAttribute("data-id", id);
  caption.textContent = title;

  //continues to check user's button pressing
  userActivity(selectedImage.dataset.id); 
}

/*                   
 * updates window when the user uses next/previous buttons
 */

function userActivity(index) {
  var prev = document.getElementById("previous");
  var nxt = document.getElementById("next");

  //selectedImage is the first image, therefore can't go to previous image
  if (index == 0) {
    nxt.style.display = "block";
    prev.style.display = "none";

    //otherwise, its NOT the first image, therefore can go to previous image  
  } else {
    prev.style.display = "block";

    //if selectedImage is the last image, can't go to next
    if (index == n - 1) {
      nxt.style.display = "none";
    } else {
      nxt.style.display = "block";
    }
  }
}

/*                   
 * returns to grid when the user uses exit button
 */
function exit() {
  div.style.display = "none";
  //changes selectedImage to null basically
  selectedImage.setAttribute("src", "");
  selectedImage.setAttribute("data-id", "");
}

/*                   
 * goes to the previous picture in lightbox mode
 */
function previous() {
  //decrements index to signal going backward in allpics[]
  var updatedIndex = parseInt(selectedImage.dataset.id) - 1;
  var updatedUrl = getLarger(updatedIndex);

  if (updatedIndex > -1) {
    selectedImage.setAttribute("src", updatedUrl); 
    selectedImage.setAttribute("data-id", updatedIndex); 
    caption.textContent = getCaption(updatedIndex);
  }

  //continues to check user's button pressing
  userActivity(selectedImage.dataset.id);
}

function next() {
  //increments index to signal going forwared in allpics[]
  var updatedIndex = parseInt(selectedImage.dataset.id) + 1;
  var updatedUrl = getLarger(updatedIndex);

  if (updatedIndex < n - 1) {
    selectedImage.setAttribute("src", updatedUrl);
    selectedImage.setAttribute("data-id", updatedIndex);
    caption.textContent = getCaption(updatedIndex);
  }

  //continues to check user's button pressing
  userActivity(selectedImage.dataset.id);
}

//**********************************GETTERS**********************************

/*
 * returns the URL for the smaller image
 */
function getSmaller(index) {
  return allPics[index].url_c.replace("_c.jpg", "_s.jpg");
}

/*
 * returns the URL for the larger image
 */
function getLarger(index) {
  return allPics[index].url_s.replace("_s.jpg", "_c.jpg");
}

/**
 * returns the caption of the photo
 */
function getCaption(index) {
  return allPics[index].title;
}

//**********************************KEY ACTIVITY**********************************

//checks for key activity from user
document.onkeydown = keyActivity;

/*
 * uses the key activity and matches 
 * it to a function call calls a function 
 */
function keyActivity(key) {
  key = key || window.event;

  switch (key.keyCode) {
    //escape key
    case 27:
      exit();
      break;
      //left arrow key
    case 37:
      previous();
      break;
      //right arrow key
    case 39:
      next();
      break;
  }
}
